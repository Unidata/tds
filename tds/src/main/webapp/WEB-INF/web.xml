<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"
         version="5.0">

  <display-name>THREDDS Data Server</display-name>
  <!-- Provide the context path at init time (otherwise, not available till a request is made). -->
  <!-- LOOK remove this -->
  <context-param>
    <param-name>ContextPath</param-name>
    <param-value>thredds</param-value>
  </context-param>

  <description>THREDDS Data Server</description>

  <!--
     Spring listener to bootstrap Spring WebApplicationContext. Used to
     handle Spring bean configuration outside of SpringMVC configuration.
     Paths, by default, are relative to the application root.

     But first...because we are going to be using ContextLoaderListener,
     we need to make sure the Log4jServletContextListener is called first
     or else we will get thread leaks on shutdown. See
     https://issues.apache.org/jira/browse/LOG4J2-1259?focusedCommentId=15895026&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-15895026
  -->
  <listener>
    <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
  </listener>


  <filter>
    <filter-name>log4jServletFilter</filter-name>
    <filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>log4jServletFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>ERROR</dispatcher>
    <dispatcher>ASYNC</dispatcher>
  </filter-mapping>

  <!-- Now, bootstrap the Spring WebApplicationContext -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/applicationContext.xml</param-value>
  </context-param>

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- ************************************************** -->

  <!-- filters are done in Spring config  -->
  <filter>
    <filter-name>springDelegatingFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>springDelegatingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -->

  <!-- spring servlet -->
  <servlet>
    <servlet-name>spring</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/spring-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>spring</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <welcome-file-list>
    <welcome-file>/</welcome-file>
  </welcome-file-list>

  <!-- edal-wms servlet -->

  <servlet>
    <servlet-name>wms</servlet-name>
    <servlet-class>thredds.server.wms.ThreddsWmsServlet</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>wms</servlet-name>
    <url-pattern>/wms/*</url-pattern>
  </servlet-mapping>

  <listener>
    <listener-class>uk.ac.rdg.resc.edal.wms.WmsContextListener</listener-class>
  </listener>

  <!-- end edal-wms servlet -->

  <!-- edal-wms screenshot servlet -->

  <servlet>
    <servlet-name>screenshots</servlet-name>
    <servlet-class>uk.ac.rdg.resc.edal.wms.ScreenshotServlet</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>screenshots</servlet-name>
    <url-pattern>/screenshots/*</url-pattern>
  </servlet-mapping>

  <filter>
    <filter-name>RequestQueryFilter</filter-name>
    <filter-class>thredds.servlet.filter.RequestQueryFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>RequestQueryFilter</filter-name>
    <servlet-name>screenshots</servlet-name>
  </filter-mapping>

  <!-- end edal-wms screenshot servlet -->

  <!-- godiva3 config servlet -->

  <servlet>
    <servlet-name>godiva3config</servlet-name>
    <servlet-class>uk.ac.rdg.resc.godiva.server.ConfigServlet</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>godiva3config</servlet-name>
    <url-pattern>/getconfig</url-pattern>
  </servlet-mapping>

  <!-- end godiva3 config servlet -->

  <!-- ++++++++++ Setup security restrictions ++++++++++ -->
  <!-- Following does not appear to work, so commented out -->
  <!--
  /*Do not allow anything but GET and HEAD*/
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>not allowed</web-resource-name>
      <url-pattern>/</url-pattern>
      <http-method-omission>GET</http-method-omission>
      <http-method-omission>HEAD</http-method-omission>
    </web-resource-collection>
    <auth-constraint/>
  </security-constraint>
  -->

  <!-- tdsConfig with HTTPS needed for /admin access  -->
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>sensitive read access</web-resource-name>
      <url-pattern>/admin/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <role-name>tdsConfig</role-name>
    </auth-constraint>
    <user-data-constraint>
      <transport-guarantee>CONFIDENTIAL</transport-guarantee>
    </user-data-constraint>
  </security-constraint>

  <!-- tdsTrigger with HTTPS needed for /admin/trigger  -->
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>allow feature collection rescan to be triggered externally</web-resource-name>
      <url-pattern>/admin/collection/trigger</url-pattern>
      <url-pattern>/admin/trigger</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <role-name>tdsTrigger</role-name>
    </auth-constraint>
    <user-data-constraint>
      <transport-guarantee>CONFIDENTIAL</transport-guarantee>
    </user-data-constraint>
  </security-constraint>

  <!-- This allows "remote monitoring":
    /thredds/admin/log gives access to logs.
   -->

  <!-- tdsMonitor with HTTPS needed for access to logs  -->
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>sensitive read access</web-resource-name>
      <url-pattern>/admin/log/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <role-name>tdsMonitor</role-name>
    </auth-constraint>
    <user-data-constraint>
      <transport-guarantee>CONFIDENTIAL</transport-guarantee>
    </user-data-constraint>
  </security-constraint>

  <!-- default restricted access dataset for testing uses BASIC -->
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>restricted access datasets</web-resource-name>
      <url-pattern>/restrictedAccess/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <role-name>restrictedDatasetUser</role-name>
    </auth-constraint>
    <!-- Do not require 'https'
      <user-data-constraint>
      <transport-guarantee>CONFIDENTIAL</transport-guarantee>
      </user-data-constraint
    -->
  </security-constraint>

  <!-- Provide a constraint that is completely outside of any Spring security -->
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>tomcat only testing</web-resource-name>
      <url-pattern>/containerauth/*</url-pattern>
    </web-resource-collection>
    <auth-constraint>
      <role-name>containerauth</role-name>
    </auth-constraint>
    <!-- Do not require 'https' -->
    <user-data-constraint>
      <transport-guarantee>NONE</transport-guarantee>
    </user-data-constraint>
  </security-constraint>

  <!-- can only have one login-config for entire context. -->
  <login-config>
    <auth-method>BASIC</auth-method>
    <realm-name>THREDDS Data Server</realm-name>
  </login-config>

  <!-- Define security roles. -->
  <security-role>
    <description>The configuration role allows users to configure the THREDDS server.</description>
    <role-name>tdsConfig</role-name>
  </security-role>

  <security-role>
    <description>User who can download tds logs for monitoring purposes.</description>
    <role-name>tdsMonitor</role-name>
  </security-role>

  <security-role>
    <description>User is allowed to trigger featureCollection rereads</description>
    <role-name>tdsTrigger</role-name>
  </security-role>

  <security-role>
    <description>User who can access restricted datasets.</description>
    <role-name>restrictedDatasetUser</role-name>
  </security-role>

  <security-role>
    <description>User who can access tomcat container protected datasets.</description>
    <role-name>containerauth</role-name>
  </security-role>

  <!-- deny-uncovered-http-methods/ -->

</web-app>
