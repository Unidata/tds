ext {
  // Extra properties must be declared in the "ext" namespace. After declaration, they can be used without prefix.
  // These will be inherited by any project buildscript that needs to reference a dependency or plugin by its full
  // maven coordinates.

  // plugin version management
  buildPlugins = [:]
  buildPlugins.gretty = 'org.gretty:gretty:3.0.9'
  buildPlugins.shadow = 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
  buildPlugins.sonarqube = 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0'
  buildPlugins.spotless = 'com.diffplug.spotless:spotless-plugin-gradle:4.5.1'
  buildPlugins.protobuf = 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
  buildPlugins.nexus = 'edu.ucar.unidata:unidata-nexus-gradle:0.0.1'
  buildPlugins.jekyll = 'edu.ucar.unidata.site:jekyll-plugin:0.0.4'
  buildPlugins.depcheck = 'org.owasp:dependency-check-gradle:6.0.2'

  // slf4j version is declared in a place where we cannot use the tds-platform project to handle resolving versions
  // (e.g. gradle/any/dependencies.gradle, for transitive dependency replacement purposes)
  // same for gwt (e.g. tds/build.gradle)
  // best we can do is define the version here, which can then be applied in all of the places we need the full maven
  // coords.
  depVersion = [:]
  depVersion.slf4j = '1.7.28'
  depVersion.gwt = '2.8.2'
  depVersion.jaxen = '1.1.6'
  depVersion.netcdfJava = '5.5.4-SNAPSHOT'
  // gradle seems to have issues with the compileOnly configuration, so we need to provide the full maven
  // coordinates for javax.servlet-api if the gradle plugin in applied. If we don't, we see errors like this:
  depVersion.javaxServletApi = '3.1.0'
  depVersion.hibernateValidator = '6.1.5.Final'
  // TODO: figure out way to keep this version in sync with netcdf-java version
  // It is included in the netcdf-java-bom (via netcdf-java-platform), but we can't
  // reference that version in a gradle build script (see gradle/any/protobuf.gradle)
  depVersion.protobuf = '3.21.7'
}
