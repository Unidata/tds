// In Gradle, dependencies specified in a parent's buildscript {} block are visible to all children.
// However, that behavior doesn't seem to hold for script plugins (this file) applied from the parent script.
// So we have to repeat ourselves. See the root project's build script for more notes on buildscript {} block weirdness.
buildscript {
  apply from: "$rootDir/gradle/any/shared-mvn-coords.gradle"

  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath buildPlugins.gretty  // We want to import FarmBeforeIntegrationTestTask, etc.
  }
}

apply from: "$rootDir/gradle/any/properties.gradle"
apply plugin: 'org.gretty'
apply plugin: 'jacoco'

// when applying the gretty buildScript to a project, make sure that project has access to the gretty tomcat runners
repositories {
  exclusiveContent {
    forRepository {
      mavenCentral()
      gradlePluginPortal()
    }
    // only look for unidata gretty related artifacts from the above repos
    filter {
      includeGroup 'org.gretty'
    }
  }
}

// allow servlet container to be configured by setting a system property
def servletContainerName = System.getProperty('tds.test.gretty.container')
if (servletContainerName == null || servletContainerName.isEmpty()) {
  servletContainerName = 'tomcat10'
}

import org.akhikhl.gretty.AppBeforeIntegrationTestTask
import org.akhikhl.gretty.GradleUtils
import org.akhikhl.gretty.AppStartTask

gretty {
  // servlet container configurable using system property
  servletContainer "$servletContainerName"

  // Pass filtered system properties to the embedded Tomcat that Gretty will launch.
  systemProperties addFilteredSysProps([:])

  // We want to modify Gretty tasks but they won't be added to the project until after evaluation:
  // http://goo.gl/qlFXTD. So, our modifications must also occur after evaluation.
  afterEvaluate {

    // These enable HTTPS authentication, which is needed to access the TDS admin interface.
    httpsEnabled = true
    sslKeyStorePath = "$rootDir/gradle/gretty/tomcat/keystore"
    sslKeyStorePassword = 'secret666'
    realmConfigFile = "$rootDir/gradle/gretty/tomcat/tomcat-users.xml"

    // Write separate Jacoco execution data for the client and server components of the integration test.
    if (project.extensions.findByName('jacoco')) {  // Is the Jacoco plugin applied to the project?
      tasks.matching {
        GradleUtils.instanceOf(it, AppBeforeIntegrationTestTask.name)
      }.each {
        def integTestTaskName = it.integrationTestTask
        Task integTestTask = tasks.findByName(integTestTaskName)

        if (integTestTask) {  // Integration task exists.
          // Report on the AppBeforeIntegrationTestTask and integTestTask.
          tasks.jacocoTestReport.executionData it, integTestTask

          // "jacoco" extension will be applied to these tasks if the Jacoco plugin is applied to the project.
          it.jacoco.destinationFile = file("$buildDir/jacoco/${integTestTaskName}_server.exec")
          integTestTask.jacoco.destinationFile = file("$buildDir/jacoco/${integTestTaskName}_client.exec")
        }
      }
    }
  }
}
