description = 'A collection of utilities needed server-side, including THREDDS catalog handling.'
ext.title = 'Server-side common library'

apply from: "$rootDir/gradle/any/dependencies.gradle"
apply from: "$rootDir/gradle/any/java-published.gradle"
apply from: "$rootDir/gradle/any/protobuf.gradle"

dependencies {
  implementation enforcedPlatform(project(':tds-platform'))
  testImplementation enforcedPlatform (project(':tds-testing-platform'))
  implementation 'edu.ucar:cdm-core'
  implementation 'edu.ucar:cdm-s3'
  implementation 'edu.ucar:grib'
  implementation 'org.jdom:jdom2'

  implementation 'jakarta.validation:jakarta.validation-api'
  implementation 'jakarta.annotation:jakarta.annotation-api'

  implementation 'org.quartz-scheduler:quartz'
  implementation 'net.openhft:chronicle-map'
  implementation 'com.google.code.findbugs:jsr305'
  implementation 'com.google.guava:guava'
  implementation 'com.google.protobuf:protobuf-java'
  implementation 'com.google.re2j:re2j'

  implementation 'org.slf4j:slf4j-api'

  // Spring
  implementation 'org.springframework:spring-core'
  implementation 'org.springframework:spring-context'
  implementation 'org.springframework:spring-beans'

  // Testing
  testImplementation 'edu.ucar:cdm-test-utils'  // Contains stuff like the JUnit @Category classes.
  testImplementation 'com.google.truth:truth'
  testImplementation 'junit:junit'
  testImplementation 'org.mockito:mockito-core'
  testRuntimeOnly 'ch.qos.logback:logback-classic'
}

spotless {
  java {
    // exclude proto generated files
    targetExclude('src/main/java/thredds/server/catalog/tracker/ConfigCatalogExtProto.java')
  }
}

tasks.named('sourceJar').configure {
  dependsOn('generateProto')
}

test {
  jvmArgs = jvmArguments
}
