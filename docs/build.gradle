plugins {
  id 'base'
}

apply from: "${rootDir}/gradle/any/properties.gradle"
apply from: "${projectDir}/helpers.gradle"

////////////////////////
// Jekyll Sites Build //
////////////////////////

final def docsets = ['adminguide', 'devguide', 'quickstart', 'userguide']
final def rawRepoName = 'docs-tds'
final def buildAllJekyllSitesTaskName = 'buildAllJekyllSites'

// copy shared files
def filesToCopy = copySpec {
  from "${projectDir}/shared"
  include '**/*.golden'
  rename '(.*).golden', '$1'
}

def copySharedJekyllFilesTask = tasks.register('copySharedJekyllFiles', Copy) {
  group = 'documentation-set'
  into "${projectDir}"
  docsets.each { docset ->
    into("${docset}") {
      with filesToCopy
    }
  }
}

// clean up shared files files that were copied during the jekyll site build tasks
clean {
  def tree = fileTree("${projectDir}/shared")
  tree.include('**/*.golden')
  tree.forEach {
    def relFileToDelete = projectDir.toPath().resolve('shared').relativize(it.toPath())
    docsets.each { docset ->
      def fileToDelete = file("${projectDir}/${docset}").toPath().resolve(relFileToDelete)
      fileToDelete = fileToDelete.toString().replaceAll("\\.golden\$", "")
      delete fileToDelete
    }
  }
}

// aggregator task (aggregate individual doc set builds)
tasks.register(buildAllJekyllSitesTaskName) {
  group = 'Documentation'
  description = 'Build all jekyll sites.'
}

String docTheme = "unidata-jekyll-docs:0.0.5"

boolean isGitHub = System.getenv('GITHUB_ACTIONS') as boolean
String imageBaseUrl = "docker.unidata.ucar.edu"
if (isGitHub) {
  imageBaseUrl = "ghcr.io/unidata"
}
String dockerImage = "${imageBaseUrl}/${docTheme}"

class NullOutputStream extends OutputStream {
  @Override
  void write(int b) throws IOException {}
}

// setup build and publish tasks associated with each individual documentation set
docsets.each { docset ->
  def partialTaskName = makeUpperCamelCase(docset)
  Provider<Directory> siteBuildDir = layout.buildDirectory.dir("site/${docset}")
  def buildTask = tasks.register("build${partialTaskName}", Exec) {
    group 'documentation-set'
    description "Build ${docset} jekyll site."
    ConfigurableFileTree buildDocInputs = fileTree("./${docset}/src/site")
    buildDocInputs.exclude(".jekyll-cache")
    inputs.files(buildDocInputs)
    outputs.dir(siteBuildDir)
    commandLine("docker", "run", "--rm",
            "-e", "SRC_DIR=/tds/docs/${docset}/src/site",
            "-v", "${rootDir}:/tds",
            "-v", "./${relativePath(siteBuildDir.get().toString())}:/site",
            dockerImage, "build")
    dependsOn copySharedJekyllFilesTask
  }

  tasks.register("serve${partialTaskName}", Exec) {
    group 'documentation-set'
    description "Serve $docset jekyll site."
    commandLine("docker", "run", "--rm", "-d",
            "--name", "tds-docs-server",
            "-e", "SRC_DIR=/tds/docs/${docset}/src/site",
            "-v", "${rootDir}:/tds",
            "-p", "4005:4005",
            dockerImage, "serve", "--livereload")
    standardOutput = new NullOutputStream()
    dependsOn copySharedJekyllFilesTask
    doLast {
      String msg = "TDS ${docset} available at http://localhost:4005"
      String bannerBorder = new String(new char[msg.length() + 4]).replace("\0", "#");
      println()
      println(bannerBorder)
      println("# $msg #")
      println(bannerBorder)
      println()
    }
  }

  // register tasks with the aggregator build task
  tasks.named(buildAllJekyllSitesTaskName).configure({dependsOn buildTask})
}

tasks.register("stopServe", Exec) {
  group = "documentation-set"
  description = "Stop the local server used while live editing a tds documentation set."
  commandLine("docker", "stop", "tds-docs-server")
  docsets.each { docset ->
    delete("${projectDir}/${docset}/src/site/Gemfile")
    delete("${projectDir}/${docset}/src/site/Gemfile.lock")
  }
}
